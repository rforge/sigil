summary(time_adv)
summary(time_adv / sample.sizess)
summary(time_adv / sample.sizes)
head(All)
summary(EO)
n.avg <- 36000 # average size of subcorpus = 36000 tokens#
#
p <- .05 # this parameter determines overdispersion of nbinom#
sample.sizes <- rnbinom(size, n.avg * p / (1-p), p)#
summary(sample.sizes)
n.avg <- 37000 # average size of subcorpus = 36000 tokens#
#
p <- .05 # this parameter determines overdispersion of nbinom#
sample.sizes <- rnbinom(size, n.avg * p / (1-p), p)#
summary(sample.sizes)
time_adv <- rbinom(size, sample.sizes, prop)#
summary(time_adv)
summary(time_adv / sample.sizes)
BigCo <- data.frame(cat=paste("R", 1:size), tokens=sample.sizes, time_adv=time_adv, proportion=1000*time_adv/sample.sizes)
dim(BigCo)#
head(BigCo)
BigCo
write.csv(BigCo, "bigco_timeadv.csv")
EO
?lapply
?grep
result.list <- lapply(1:500, function (i) {#
	res <- prop.test(c(BigCo$time_adv[i], ref.time_adv), c(BigCo$tokens[i], ref.tokens))#
	if (res$p.value < .05) {#
		data.frame(p.value=res$p.value, lower=res$conf.int[1], upper=res$conf.int[2], row.names=BigCo$cat[i])#
	} else {#
		NULL#
	}#
})
ref.time_adv <- 144#
ref.tokens <- 42332#
#
result.list <- lapply(1:500, function (i) {#
	res <- prop.test(c(BigCo$time_adv[i], ref.time_adv), c(BigCo$tokens[i], ref.tokens))#
	if (res$p.value < .05) {#
		data.frame(p.value=res$p.value, lower=res$conf.int[1], upper=res$conf.int[2], row.names=BigCo$cat[i])#
	} else {#
		NULL#
	}#
})
str(result.list)
result.list
is.null(result.list)
lapply(result.list, is.null)
sum(lapply(result.list, is.null))
sum(unlist(lapply(result.list, is.null)))
result.list <- lapply(1:500, function (i) {#
	res <- prop.test(c(BigCo$time_adv[i], ref.time_adv), c(BigCo$tokens[i], ref.tokens))#
	data.frame(p.value=res$p.value, lower=res$conf.int[1], upper=res$conf.int[2], row.names=BigCo$cat[i])#
})
result.list
results <- do.call(rbind, result.list)
results
summary(results$p.value)
time_adv <- rbinom(size, sample.sizes, prop)#
summary(time_adv)#
#
summary(time_adv / sample.sizes)#
#
BigCo <- data.frame(cat=paste("R", 1:size), tokens=sample.sizes, time_adv=time_adv, proportion=1000*time_adv/sample.sizes)
result.list <- lapply(1:500, function (i) {#
	res <- prop.test(c(BigCo$time_adv[i], ref.time_adv), c(BigCo$tokens[i], ref.tokens))#
	data.frame(p.value=res$p.value, lower=res$conf.int[1], upper=res$conf.int[2], row.names=BigCo$cat[i])#
})#
results <- do.call(rbind, result.list)
summary(results$p.value)
subset(BigCo, p.value < .05)
subset(results, p.value < .05)
write.csv(BigCo, "bigco_timeadv.csv")
time_adv <- rbinom(size, sample.sizes, prop)#
summary(time_adv)#
#
summary(time_adv / sample.sizes)#
#
BigCo <- data.frame(cat=paste("R", 1:size), tokens=sample.sizes, time_adv=time_adv, proportion=1000*time_adv/sample.sizes)
result.list <- lapply(1:500, function (i) {#
	res <- prop.test(c(BigCo$time_adv[i], ref.time_adv), c(BigCo$tokens[i], ref.tokens))#
	data.frame(p.value=res$p.value, lower=res$conf.int[1], upper=res$conf.int[2], row.names=BigCo$cat[i])#
})#
results <- do.call(rbind, result.list)#
summary(results$p.value)
time_adv <- rbinom(size, sample.sizes, prop)#
summary(time_adv)#
#
summary(time_adv / sample.sizes)#
#
BigCo <- data.frame(cat=paste("R", 1:size), tokens=sample.sizes, time_adv=time_adv, proportion=1000*time_adv/sample.sizes)#
#
dim(BigCo)#
head(BigCo)#
#
#
## write.csv(BigCo, "bigco_timeadv.csv")#
#
ref.time_adv <- 144#
ref.tokens <- 42332#
#
result.list <- lapply(1:500, function (i) {#
	res <- prop.test(c(BigCo$time_adv[i], ref.time_adv), c(BigCo$tokens[i], ref.tokens))#
	data.frame(p.value=res$p.value, lower=res$conf.int[1], upper=res$conf.int[2], row.names=BigCo$cat[i])#
})#
results <- do.call(rbind, result.list)#
summary(results$p.value)#
sum(results$p.value < .05)
write.csv(BigCo, "bigco_timeadv.csv")
BigCo <- read.csv("bigco_timeadv.csv")
ref.time_adv <- 144#
ref.tokens <- 42332#
#
result.list <- lapply(1:500, function (i) {#
	res <- prop.test(c(BigCo$time_adv[i], ref.time_adv), c(BigCo$tokens[i], ref.tokens))#
	data.frame(p.value=res$p.value, lower=res$conf.int[1], upper=res$conf.int[2], row.names=BigCo$cat[i])#
})#
results <- do.call(rbind, result.list)#
summary(results$p.value)#
sum(results$p.value < .05)
subset(results, p.value <= .05)
result.list <- lapply(1:500, function (i) {#
	res <- prop.test(c(BigCo$time_adv[i], ref.time_adv), c(BigCo$tokens[i], ref.tokens))#
	data.frame(cat=BigCo$cat[i] , p.value=res$p.value, lower=res$conf.int[1], upper=res$conf.int[2])#
})#
results <- do.call(rbind, result.list)#
summary(results$p.value)#
#
subset(results, p.value <= .05)
results <- transform(results, lower=1000*lower, upper=1000*upper) # rescale confidence intervals to "per 1000 words"
subset(results, p.value <= .05)
Texts <- read.csv("croco_texts.csv")
dim(Texts)
head(Texts)
head(BigCo)
BigCo <- BigCo[,-1]
BigCo
head(BigCo)
write.csv(BigCo, "bigco_timeadv.csv", row.names=FALSE)
prop.test( c(192, 144), c(36996 , 42332) )
ct <- cont.table()
library(corpora)
prop.test( c(192, 144), c(36996 , 42332) )
ct <- cont.table(192, 36996, 144, 42332)
ct
fisher.test(ct)
chisq.test(ct)
prop.test( c(192, 144), c(36996 , 42332) )
chisq.test(ct)
fisher.test(ct)
EO
prop.test( c(EO$time_adv[2], EO$time_adv[9]), c(EO$token[2], EO$token[9]) )
prop.test( EO$time_adv[c(2,9)], EO$token[c(2,9)] )
?for
)_
?'for'
1:8
for (i in 1:8) {#
	#
	print(i)#
	# prop.test( EO$time_adv[c(i,9)], EO$token[c(i,9)] )#
#
}
for (i in 1:8) {#
	#
	print(i)#
#
}
for (i in c("one","two","three")) {#
	#
	print(i)#
#
}
for (i in 1:8) {#
	#
	print(i)#
	prop.test( EO$time_adv[c(i,9)], EO$token[c(i,9)] )#
#
}
for (i in 1:8) {#
	#
	print(i)#
	print( prop.test( EO$time_adv[c(i,9)], EO$token[c(i,9)] ) )#
#
}
for (i in 1:8) {#
	#
	print(i)#
	result <- prop.test( EO$time_adv[c(i,9)], EO$token[c(i,9)] ) #
	print(result$p.value)#
#
}
EO
for (i in 1:8) {#
	#
	print(i)#
	result <- prop.test( EO$time_adv[c(i,9)], EO$token[c(i,9)] ) #
	print( round(result$p.value, 5) )#
#
}
EO
for (i in 1:8) {#
	#
	print(EO$register[i])#
	result <- prop.test( EO$time_adv[c(i,9)], EO$token[c(i,9)] ) #
	print( round(result$p.value, 5) )#
#
}
for (i in 1:8) {#
	#
	print( as.character(EO$register[i]) )#
	result <- prop.test( EO$time_adv[c(i,9)], EO$token[c(i,9)] ) #
	print( round(result$p.value, 5) )#
#
}
for (i in 1:8) {#
	#
	print( as.character(EO$register[i]) )#
	result <- prop.test( EO$time_adv[c(i,9)], EO$token[c(i,9)] ) #
	print( round(result$p.value, 5) )#
	print( 1000 * result$conf.int )#
#
}
for (i in 1:8) {#
	#
	register <- as.character(EO$register[i])#
	result <- prop.test( EO$time_adv[c(i,9)], EO$token[c(i,9)] ) #
	p.value <- round(result$p.value, 5)#
	conf.int <- 1000 * result$conf.int#
#
	row <- data.frame(register=register, p.value=p.value, lower=conf.int[1], upper=conf.int[2])#
	print(row)#
#
}
for (i in 1:8) {#
	#
	register <- EO$register[i]#
	result <- prop.test( EO$time_adv[c(i,9)], EO$token[c(i,9)] ) #
	p.value <- round(result$p.value, 5)#
	conf.int <- 1000 * result$conf.int#
#
	row <- data.frame(register=register, p.value=p.value, lower=conf.int[1], upper=conf.int[2])#
	print(row)#
#
}
lapply(1:8, function (i) {#
	#
	register <- EO$register[i]#
	result <- prop.test( EO$time_adv[c(i,9)], EO$token[c(i,9)] ) #
	p.value <- round(result$p.value, 5)#
	conf.int <- 1000 * result$conf.int#
#
	row <- data.frame(register=register, p.value=p.value, lower=conf.int[1], upper=conf.int[2])#
	print(row)#
#
})
row.list <- lapply(1:8, function (i) {#
	#
	register <- EO$register[i]#
	result <- prop.test( EO$time_adv[c(i,9)], EO$token[c(i,9)] ) #
	p.value <- round(result$p.value, 5)#
	conf.int <- 1000 * result$conf.int#
#
	row <- data.frame(register=register, p.value=p.value, lower=conf.int[1], upper=conf.int[2])#
	row#
#
})
?rbind
do.call(rbind, row.list)
result.table <- do.call(rbind, row.list)#
write.csv(result.table, "croco_timeadv_results.csv", row.names=FALSE)
setwd("/Users/severt/Writings/Courses/SIGIL/demos")
result.table <- do.call(rbind, row.list)#
write.csv(result.table, "croco_timeadv_results.csv", row.names=FALSE)
head(BigCo)
head(BigCo,30)
head(BigCo,20)
bigco <- read.csv("bigco_timeadv.csv")
row.list <- lapply(1:500, function (i) {#
	register <- BigCo$cat[i]#
	result <- prop.test( c(BigCo$time_adv[i], ref.time_adv), c(BigCo$token[i], ref.token) ) #
	p.value <- round(result$p.value, 5)#
	conf.int <- 1000 * result$conf.int#
#
	row <- data.frame(register=register, p.value=p.value, lower=conf.int[1], upper=conf.int[2])#
	row#
})#
bigco.table <- do.call(rbind, row.list)
BigCo <- read.csv("bigco_timeadv.csv") #
ref.time_adv <- EO$time_adv[9]#
ref.token <- EO$token[9]
row.list <- lapply(1:500, function (i) {#
	register <- BigCo$cat[i]#
	result <- prop.test( c(BigCo$time_adv[i], ref.time_adv), c(BigCo$token[i], ref.token) ) #
	p.value <- round(result$p.value, 5)#
	conf.int <- 1000 * result$conf.int#
#
	row <- data.frame(register=register, p.value=p.value, lower=conf.int[1], upper=conf.int[2])#
	row#
})#
bigco.table <- do.call(rbind, row.list)
head(bigco.table, 20)
subset(bigco.table, p.value < 0.05)
EO
result.table
EO
prop.test( c(192, 144), c(36996, 42332) )
prop.test( c(88, 192, 144), c(34998, 36996, 42332) )
EO
prop.test( EO$time_adv, EO$token )
prop.test( EO$time_adv[1:8], EO$token[1:8] )
prop.test( BigCo$time_adv, BigCo$token )
d <- read.table("comp.stats.txt", header=TRUE)
attach(d)
summary(d)
boxplot(d[,4:9])
hist(d$COS)
dim(d)
hist(COS, breaks=10)
hist(HDELPROP, breaks=10)
hist(DELMPROP, breaks=10)
hist(NMPROP, breaks=10)
hist(DELLLL, breaks=10)
hist(DELLL, breaks=10)
sort(DELLL)
t.test(COS ~ TYPE)
t.test(DELLL ~ TYPE)
t.test(HDELPROP ~ TYPE)
cor(d[,4:9])
pairs(d[,4:9])
pairs(d[,4:9], col=TYPE)
pairs(d[,4:9], col=TYPE, pch=20)
table(TYPE)
km <- kmeans(d[,4:9], 2, nstart=10)#
km
pairs(d[,4:9], col=km$cluster, pch=20)
?pairs
pairs(d[,4:9], col=km$cluster, pch=20, xlim=c(-1,1))
pairs(d[,4:9], col=km$cluster, pch=20, xlim=c(-1,1), ylim=c(-1,1))
summary(d)
pairs(d[,4:9], col=km$cluster, pch=20, xlim=c(-20,5e5), ylim=c(-20,5e5))
scaled <- scale(d[,4:9])
summary(scaled)
min(scaled)
range(scaled)
pairs(scaled[,4:9], col=km$cluster, pch=20, xlim=c(-2,10), ylim=c(-2,10))
pairs(scaled, col=km$cluster, pch=20, xlim=c(-2,10), ylim=c(-2,10))
pairs(scaled, col=km$cluster, pch=20, xlim=c(-2,4), ylim=c(-2,4))
km <- kmeans(scaled, 2, nstart=10)#
km
pairs(scaled, col=km$cluster, pch=20, xlim=c(-2,4), ylim=c(-2,4))
?spheres3d
library(rgl)
?spheres3d
spheres3d(scaled$HDELPROP, scaled$DELMPROP, scaled$HNPROP, col=km$cluster)
scaled
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=km$cluster)
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=km$cluster, radius=.05)
?reset3d
?rgl
rgl.clear()
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=km$cluster, radius=.05)
rgl.clear()
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=km$cluster, radius=.1)
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.1)
rgl.clear()
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.1)
rgl.clear()
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.1*km$cluster)
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.05*km$cluster)
rgl.clear()
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.05*km$cluster)
?spheres3d
rgl.clear()
spheres3d(scaled[,3:5], col=km$cluster, radius=(1+TYPE)*.04)
spheres3d(scaled[,3:5], col=km$cluster, radius=(1+codes(TYPE))*.04)
spheres3d(scaled[,3:5], col=km$cluster, radius=(1+as.integer(TYPE))*.04)
spheres3d(scaled[,3:5], col=km$cluster, radius=.5)
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.05*km$cluster)
rgl.clear()
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.05*km$cluster)
rgl.clear()
spheres3d(scaled[,3:5], col=km$cluster, radius=.5)
rgl.clear()
spheres3d(scaled[,3:5], col=km$cluster, radius=(1+as.integer(TYPE))*.04)
rgl.clear()
spheres3d(scaled[,3:5], col=km$cluster, radius=(4-as.integer(TYPE))*.02)
?rgl
?misc3d
library(misc3d)
?misc3d
help(package=misc3d)
?teapot
?pointsTetrahedra
help(package=misc3d)
?drawScene
km <- kmeans(scaled, 3, nstart=10)#
km
spheres3d(scaled[,3:5], col=km$cluster, radius=(4-as.integer(TYPE))*.02)
rgl.clear()
spheres3d(scaled[,3:5], col=km$cluster, radius=(4-as.integer(TYPE))*.02)
p <- (1:100)/100; qp <- qbeta(p, 0.01,5)#
 plot(p,qp, type="o", log = "y"
)
 plot(p,qp, type="o", log = "xy")
urve(qchisq(1e-12,1,x^2,lower.tail=FALSE),from=0.1,to=50)
curve(qchisq(1e-12,1,x^2,lower.tail=FALSE),from=0.1,to=50)
?mnhyper
fisher.test
?readLines
getOption("encoding")
cat(1:3)
cat(1:3,"\n")
cat(1:3,"!\n")
??rawtochar
charToRaw
rawToChar
charToRaw("abc")
rawToChar("abc")
rawToChar(64:67)
str(charToRaw("abc"))
as.raw(65:67)
rawToChar(as.raw(65:67))
cat(as.raw(65:67))
str(charToRaw("abc"))
str(charToRaw("abc")[1])
str(charToRaw("abc")[2])
x <- as.raw(1:1000000)
str(x)
tail(x)
x <- as.raw(rep(32:90), 10000)
x <- as.raw(rep(32:90, 10000))
length(x)
object.size(x)
y <- rawToChar(x)
length(y)
nchar(y)
object.size(y)
cat(y)
?strsplit
strsplit(c("foo","bar","baz"))
strsplit(c("foo","bar","baz"), "")
unlist(strsplit(c("foo","bar","baz"), ""))
?grep
?try
print(try(log("a"), TRUE))
?warnings
warnings()
warnings()
print(warnings())
?warnings
?options
options("ow")
?warnings
print(warnings())
?options
