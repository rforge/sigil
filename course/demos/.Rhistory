pairs(scaled, col=km$cluster, pch=20, xlim=c(-2,10), ylim=c(-2,10))
pairs(scaled, col=km$cluster, pch=20, xlim=c(-2,4), ylim=c(-2,4))
km <- kmeans(scaled, 2, nstart=10)#
km
pairs(scaled, col=km$cluster, pch=20, xlim=c(-2,4), ylim=c(-2,4))
?spheres3d
library(rgl)
?spheres3d
spheres3d(scaled$HDELPROP, scaled$DELMPROP, scaled$HNPROP, col=km$cluster)
scaled
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=km$cluster)
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=km$cluster, radius=.05)
?reset3d
?rgl
rgl.clear()
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=km$cluster, radius=.05)
rgl.clear()
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=km$cluster, radius=.1)
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.1)
rgl.clear()
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.1)
rgl.clear()
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.1*km$cluster)
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.05*km$cluster)
rgl.clear()
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.05*km$cluster)
?spheres3d
rgl.clear()
spheres3d(scaled[,3:5], col=km$cluster, radius=(1+TYPE)*.04)
spheres3d(scaled[,3:5], col=km$cluster, radius=(1+codes(TYPE))*.04)
spheres3d(scaled[,3:5], col=km$cluster, radius=(1+as.integer(TYPE))*.04)
spheres3d(scaled[,3:5], col=km$cluster, radius=.5)
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.05*km$cluster)
rgl.clear()
spheres3d(scaled[,"HDELPROP"], scaled[,"DELMPROP"], scaled[,"HNPROP"], col=TYPE, radius=.05*km$cluster)
rgl.clear()
spheres3d(scaled[,3:5], col=km$cluster, radius=.5)
rgl.clear()
spheres3d(scaled[,3:5], col=km$cluster, radius=(1+as.integer(TYPE))*.04)
rgl.clear()
spheres3d(scaled[,3:5], col=km$cluster, radius=(4-as.integer(TYPE))*.02)
?rgl
?misc3d
library(misc3d)
?misc3d
help(package=misc3d)
?teapot
?pointsTetrahedra
help(package=misc3d)
?drawScene
km <- kmeans(scaled, 3, nstart=10)#
km
spheres3d(scaled[,3:5], col=km$cluster, radius=(4-as.integer(TYPE))*.02)
rgl.clear()
spheres3d(scaled[,3:5], col=km$cluster, radius=(4-as.integer(TYPE))*.02)
p <- (1:100)/100; qp <- qbeta(p, 0.01,5)#
 plot(p,qp, type="o", log = "y"
)
 plot(p,qp, type="o", log = "xy")
urve(qchisq(1e-12,1,x^2,lower.tail=FALSE),from=0.1,to=50)
curve(qchisq(1e-12,1,x^2,lower.tail=FALSE),from=0.1,to=50)
?mnhyper
fisher.test
?readLines
getOption("encoding")
cat(1:3)
cat(1:3,"\n")
cat(1:3,"!\n")
??rawtochar
charToRaw
rawToChar
charToRaw("abc")
rawToChar("abc")
rawToChar(64:67)
str(charToRaw("abc"))
as.raw(65:67)
rawToChar(as.raw(65:67))
cat(as.raw(65:67))
str(charToRaw("abc"))
str(charToRaw("abc")[1])
str(charToRaw("abc")[2])
x <- as.raw(1:1000000)
str(x)
tail(x)
x <- as.raw(rep(32:90), 10000)
x <- as.raw(rep(32:90, 10000))
length(x)
object.size(x)
y <- rawToChar(x)
length(y)
nchar(y)
object.size(y)
cat(y)
?strsplit
strsplit(c("foo","bar","baz"))
strsplit(c("foo","bar","baz"), "")
unlist(strsplit(c("foo","bar","baz"), ""))
?grep
?try
print(try(log("a"), TRUE))
?warnings
warnings()
print(warnings())
?warnings
?options
options("ow")
?warnings
print(warnings())
?options
a <- 2
a * 2
a * 2 +
3
log(a,
2)
ls
ls <- 42
ls()
ls
ls <- function () cat("blÃ¶d")
ls()
rm(ls)
a <- c(1,2,3)
a
2 * 9
a <- 10^(1:100)
a
log(a, base=10)
a <- 2^(1:100)
plot(a)
x<-1:100            # most often: plot \(x\) against \(y\)
y<-sqrt(x)
rbind(x,y)[,1:10]
plot(x,y)
plot(x,y, type="l")
plot(x,y, type="b")
plot(x,y, type="o")
plot(x,y, type="h")
plot(x,a)
plot(x,a, log="y")
plot(x,a, log="xy")
plot(log(x),log(a))
hist(rnorm(100))    # histogram and density estimation
hist(rnorm(1000))
plot(density(rnorm(100000)))
plot(density(rnorm(1000)))
plot(density(rnorm(100)))
?hist
?lines
?log
?hist
hist(islands)
op <- par(mfrow=c(2, 2))#
hist(islands)#
utils::str(hist(islands, col="gray", labels = TRUE))
op <- par(mfrow=c(2, 2))#
hist(islands)#
utils::str(hist(islands, col="gray", labels = TRUE))
hist(sqrt(islands), breaks = 12, col="lightblue", border="pink")
r <- hist(sqrt(islands), breaks = c(4*0:5, 10*3:5, 70, 100, 140),#
          col='blue1')
text(r$mids, r$density, r$counts, adj=c(.5, -.5), col='blue3')
sapply(r[2:3], sum)#
sum(r$density * diff(r$breaks)) # == 1#
lines(r, lty = 3, border = "purple") # -> lines.histogram(*)
lines(r, lty = 3, border = "purple")
lines(r, lty = 3, col = "purple", lwd=3)
par(op)
hist(islands, col="gray", labels = TRUE)
op
par(mfrow=c(1,1))
hist(islands, col="gray", labels = TRUE)
hist(islands, col="gray", labels = TRUE, log="x")
hist(log(islands), col="gray", labels = TRUE)
hist(islands, col="gray", labels = TRUE)
hist(islands, col="gray", labels = TRUE, ylim=c(0, 50))
hist(islands, col="gray", labels = TRUE, xlim=c(0, 20000))
hist(islands, col="gray", labels = TRUE, xlim=c(0, 18000))
??histogram
help.start()
library()
library(corpora)
?lnre
?corpora
RSiteSearch("nearest neighbor")
dir()
setwd(file.choose())
?file.choose
getwd()
write.csv(brown, "brown.stats.csv", row.names=FALSE)
brown <- read.delim("brown.stats.txt")
write.csv(brown, "brown.stats.csv", row.names=FALSE)
?write.csv
write.csv2(brown, "brown.stats.csv", dec=".", row.names=FALSE)
write.csv(brown, "brown.stats.csv", dec=".", row.names=FALSE)
write.table(brown, "brown.stats.csv", dec=".", sep=";", col.names=TRUE, row.names=FALSE)
?read.csv
test
test <- read.csv2("test.csv", dec=".")
test
write.table(brown, "brown.stats.csv", dec=".", sep=";", col.names=TRUE, row.names=FALSE)
test <- read.csv2("test.csv", dec=".")
head(brown)
?all.equal
dim(brown)
plot(brown)
a <- (1:10)*10
a
a[1]
a[2]
a[11]
a[c(1,4,5)]
a[1:5]
a[-3]
a[-c(1,4,5)]
brown[1:10,1:2]
brown[1:10,c("to","ty")]
brown[1:10,-c("to","ty")]
brown$to < 2200
brown$to < 2200
sum(brown$to < 2200)
which(brown$to < 2200)
brown[ which(brown$to < 2200), ]
brown[ which(brown$to < 2200), ]
summary(brwon)
summary(brown)
subset(brown, to < 2250)
subset(brown, (to < 2250) & (ty > 900))
lob <- read.delim("lob.stats.txt")
summary(brown$to)
summary(lo$to)
summary(lob$to)
boxplot(brown$to,lob$to)
boxplot(brown$to,lob$to,names=c("brown","lob"))
par(cex=1.5)
boxplot(brown$to,lob$to,names=c("brown","lob"))
boxplot(brown$to,lob$to,names=c("brown","lob"), ylim=c(1500,3000))
t.test(brown$to,lob$to)
wilcox.test(brown$to,lob$to)
plot(brown$towl, brown$tywl)
plot(brown$towl, brown$tywl, xlim=c(0,8), ylim=c(0,8))
cor.test(brown$towl, brown$tywl)
plot(brown$to, brown$towl)
plot(BNCmeta)
attach(BNCmeta)
head(genre)
head(genre)
char.genre <- as.character("genre")
head(char.genre)
char.genre <- as.character(genre)
head(char.genre)
str(genre)
str(char.genre)
genre.types <- unique(char.genre)
genre.types
fac.genre <- factor(char.genre)
head(fac.genre)
table(fac.genre)
table(char.genre)
levels(fac.genre)
