demo(mouseCallbacks)
demo(envmap)
rgl.demo.envmap()
rgl.demo.envmap
fix(rgl.demo.envmap)
rgl.demo.envmap
rgl.demo.envmap()
fix(rgl.demo.envmap)
rgl.demo.envmap()
	modell <- lnre("gigp", gamma = -0.6744566, B = 0.0003261695, C = 28.6221)
library(zipfR)
	modell <- lnre("gigp", gamma = -0.6744566, B = 0.0003261695, C = 28.6221)
N.steps <- (1:1000) * 1000  # 1000 Token ... 1 Million Token#
	plot(lnre.vgc(modell, N.steps), N0= 39540)
	scale <- 1000
	N.steps <- seq(0.1, 100, 0.1) * 1e6 / scale  # 0.1 ... 100 Milllionen Token (Korpusgröße)#
	plot(lnre.vgc(modell, N.steps), N0= 39540)
EVm
EVm(modell, 1, N/100e6)
N <- 100e6
EVm(modell, 1, N/scale)
EVm(modell, 1, N/scale) / N
	N <- 100e6  # Korpusgröße = 100 M token#
	p <- EVm(modell, 1, N/scale) / N#
	1/p
	N.steps <- seq(1, 10000, 1) * 1e6 / scale  # 1 ... 10.000 Milllionen Token (Korpusgröße)#
	plot(lnre.vgc(modell, N.steps), N0= 39540)
	abline(v=5e9/scale, col="red")
	N.steps <- seq(1, 10000, 1) * 1e6 / scale  # 1 ... 10.000 Milllionen Token (Korpusgröße)#
	plot(lnre.vgc(modell, N.steps, add.m=1), N0= 39540)#
	abline(v=5e9/scale, col="red")
?lnre.vgc
	N.steps <- seq(1, 10000, 1) * 1e6 / scale  # 1 ... 10.000 Milllionen Token (Korpusgröße)#
	plot(lnre.vgc(modell, N.steps, m.max=1), N0= 39540)#
	abline(v=5e9/scale, col="red")
	N.steps <- seq(1, 10000, 1) * 1e6 / scale  # 1 ... 10.000 Milllionen Token (Korpusgröße)#
	plot(lnre.vgc(modell, N.steps, m.max=1), add.m=1, N0= 39540)#
	abline(v=5e9/scale, col="red")
	N.steps <- 10 ^ seq(3, 10, .1) / scale # 1000 Token ... 10 Milliarden (= 10^10) Token#
	plot(lnre.vgc(modell, N.steps), log="x", N0= 39540)
	N.steps <- 10 ^ seq(3, 11, .1) / scale # 1000 Token ... 100 Milliarden (= 10^11) Token#
	plot(lnre.vgc(modell, N.steps), log="x", N0= 39540)
	N.steps <- 10 ^ seq(3, 11, .1) / scale # 1000 Token ... 100 Milliarden (= 10^11) Token#
	plot(lnre.vgc(modell, N.steps, m.max=1), add.m=1, log="x", N0= 39540)
	abline(v=100e6/scale, col="red")
	abline(v=500e6/scale, col="red")
	abline(v=5e9/scale, col="red")
	abline(v=10e9/scale, col="red")
	abline(v=20e9/scale, col="red")
	N.steps <- 10 ^ seq(3, 11, .1) / scale # 1000 Token ... 100 Milliarden (= 10^11) Token#
	plot(lnre.vgc(modell, N.steps, m.max=1), add.m=1, log="x", N0= 39540)#
	abline(v=500e6/scale, col="darkgreen", lwd=2)#
	abline(v=20e9/scale, col="red", lwd=2)
library(fortunes)
fortune(197)
n = length(speed <- runif(angle <- runif(x <- strsplit("MERRY#
CHRISTMAS", "")[[1]], 0, 360), 0, 15))#
x11(10, 3)#
par(mar = rep(0, 4), bg = "black")#
for (j in 1:1000) {#
   angle = angle + speed#
   plot.new()#
   plot.window(c(1, n), c(0, 1))#
   for (i in 1:n) text(i, 0.5, x[i], srt = angle[i], cex = runif(1,#
1, 4), col = sample(colors(), 1))#
   Sys.sleep(0.02)#
}
dev.off()
seq(1, 1e7)
seq(1, 1e7, by=1e7)
seq(1, 10000000, by=1e7)
seq(1, 10000000, by=10000000)
seq(1L, 10000000L, by=10000000L)
seq(1L, 1000000L, by=1000000L)
seq.int(1L, 10000000L, by=10000000L)
?seq
10 * 43 * 12
10 * 43 * 12 * 15
5 * 43 * 12 * 10
35000+13000+1000+2000+75000+25000
2500 + 6000+ 5000 + 4000
library(heplots)
?heplots
contrasts(iris$Species)<-matrix(c(0,-1,1, 2, -1, -1), 3,2)#
contrasts(iris$Species)#
#
iris.mod <- lm(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) ~#
Species, data=iris)
hyp <- list("V:V"="Species1","S:VV"="Species2")#
heplot(iris.mod, hypotheses=hyp)
heplot(iris.mod, hypotheses=hyp, size="effect", add=TRUE)
heplot(iris.mod, hypotheses=hyp)#
# compare with effect-size scaling#
heplot(iris.mod, hypotheses=hyp, size="effect", add=TRUE)
hep <-heplot(iris.mod, variables=c(1,3),  hypotheses=hyp)#
str(hep)
pairs(iris.mod, hypotheses=hyp, hyp.labels=FALSE)
data(Pottery)#
pottery.mod <- lm(cbind(Al, Fe, Mg, Ca, Na) ~ Site, data=Pottery)#
heplot(pottery.mod)#
heplot(pottery.mod, terms=FALSE, add=TRUE, col="blue", #
  hypotheses=list(c("SiteCaldicot = 0", "SiteIsleThorns=0")),#
  hyp.labels="Sites Caldicot and Isle Thorns")
soils.mod <- lm(cbind(pH,N,Dens,P,Ca,Mg,K,Na,Conduc) ~ Block + Contour*Depth, data=Soils)#
Anova(soils.mod)
heplot(soils.mod, variables=c("Ca", "Mg"))
pairs(soils.mod, terms="Depth", variables=c("pH", "N", "P", "Ca", "Mg"))
heplot3d(soils.mod, variables=c("Mg", "Ca", "Na"))
plastic.mod <- lm(cbind(tear, gloss, opacity) ~ rate*additive, data=Plastic)#
heplot3d(plastic.mod)
binom.test(1,3)
binom.test(1,3)$conf.int
binom.test(1,3)$conf.int * 93
library(corpora)
nrow(BNCmeta)
attach(BNCmeta)
summary(BNCmeta)
dim(BNCmeta)
head(BNCmeta)
dim(BNCmeta)
?BNCmeta
colnames(BNCmeta)
head(genre, 20)
levels(genre)
table(genre)
table(genre)
table(genre)
min(table(genre))
?which.min
sort(table(genre))
sort(table(genre), decreasing=TRUE)
sort(levels(genre), decreasing=TRUE)
min(genre)
x <- table(genre)
min(x)
x[ x == min(x) ]
x[ which.min(x) ]
x[ which.max(x) ]
which.min(X)
which.min(x)
which.min(10:20)
which.min(x)
which.min(table(genre))
x[ !(x == min(x)) ]
head(BNCmeta)
head(genre, 20)
x == 3
summary(n_words)
hist(n_words)
boxplot(n_words)
boxplot.stats(n_words)
print(boxplot(n_words))
boxplot.stats(n_words)
par(cex=1.3)
boxplot(n_words)
boxplot(n_words, ylim=c(0,100000))
boxplot(n_words)
boxplot.stats(n_words)
?boxplot
boxplot(n_words, ylim=c(0,100000), notch=TRUE)
derived_type == "written-to-be-spoken"
sum(derived_type == "written-to-be-spoken")
head(derived_type)
table(derived_type)
levels(genre)
table(text_type)
levels(text_type)
sum(text_type == "written-to-be-spoken")
WTBSmeta <- subset(BNCmeta, text_type == "written-to-be-spoken")
dim( BNCmeta[BNCmeta$text_type == "written-to-be-spoken", ] )
dim(WTBSmeta)
boxplot(n_words)
attach(WTBSmeta)
search()
text_type
genre
search()
genre <- 42
genre
ls()
ls()
rm(WTBSmeta)
ls()
ls()
search()
rm(genre)
boxplot(genre)
boxplot(n_words)
boxplot.stats(n_words)
subset(WTBSmeta, n_words < 15000, c("id","title", "n_words", "genre"))
subset(WTBSmeta, n_words >= 15000, c("id","title", "n_words", "genre"))
summary(subset(WTBSmeta, n_words >= 15000, c("id","title", "n_words", "genre")))
table(genre)
table(genre) -> x
x[x != 0]
summary(genre)
summary(subset(WTBSmeta, n_words >= 15000, c("id","title", "n_words", "genre")))
summary( WTBSmeta[,c("id","genre")] )
summary( WTBSmeta[,"genre"] )
summary( WTBSmeta[,"genre",drop=FALSE] )
WTBSmeta[,"genre"]
WTBSmeta[,"genre",drop=FALSE]
summary( WTBSmeta[,c("genre",)] )
summary( WTBSmeta[,c("genre","genre")] )
WTBSmeta$genre
?boxplot
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
head(InsectSprays)
summary(InsectSprays)
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
search()
detach("WTBSmeta")
search()
search()
boxplot(n_words ~ text_type, data = BNCmeta, col = "lightgray")
boxplot(n_words ~ text_type, col = "lightgray")
table(text_type)
boxplot(n_words ~ author_sex, col = "lightgray")
par("cex")
par(cex=1.5)
boxplot(n_words ~ author_sex, col = "lightgray")
boxplot(n_words ~ author_sex, col = "lightgray", ylim=c(0,100000))
MFmeta <- subset(BNCmeta, (author_sex == "male") | (author_sex == "female") )
dim(MFmeta)
boxplot(n_words ~ author_sex, data = MFmeta, col = "lightgray")
boxplot(n_words ~ author_sex, data = MFmeta, col = c("lightgray","pink","lightblue"))
boxplot(n_words ~ author_sex, data = MFmeta, col = c("lightgray","pink","darkblue"))
boxplot(n_words ~ author_sex, data = MFmeta, col = c("lightgray","pink","#0044FF"))
?VSS
head(VSS)
table(VSS$pos)
tail
tail(sort(table(VSS$word)))
tail(sort(table(VSS$lemma)))
tail
TTR <- read.delim("../../datasets/")
setwd("/Users/severt/Project/SIGIL/R-Forge/datasets")
dir()
TTR <- read.delim("wackypedia_ttr.tbl.gz")
dim(TTR)
head(TTR)
summary(TTR)
hist(TTR$tokens)
hist(TTR$types)
hist(TTR$wordlen)
boxplot(TTR$tokens, TTR$types)
head(sort(TTR$wordlen, decreasing=TRUE), 30)
sum(TTR$tokens < 20)
sum(TTR$tokens < 10)
subset(TTR, tokens < 8)
subset(TTR, tokens < 7)
subset(TTR, tokens < 9)
sum(TTR$tokens >= 50)
sum(TTR$tokens >= 42)
dim(TTR)
TTR <- TTR[,-1]
head(TTR)
summary(subset(TTR, tokens >= 42))
head(sort(wordlen, decreasing=TRUE))
head(sort(TTR$wordlen, decreasing=TRUE))
head(sort(TTR$wordlen, decreasing=TRUE), 20)
head(sort(TTR$wordlen, decreasing=TRUE), 100)
head(sort(TTR$wordlen, decreasing=TRUE), 200)
TTR <- subset(TTR, tokens >= 42 & wordlen <= 9)
dim(TTR)
summary(TTR)
hist(TTR$wordlen)
summmary(TTR$avgfreq)
hist(TTR$avgfreq)
hist(TTR$types)
hist(TTR$types/TTR$tokens)
hist(TTR$tokens/TTR$types)
hist(log(TTR$tokens/TTR$types))
hist(TTR$wordlen)
hist(TTR$wordlen,breaks=50)
boxplot(n_words ~ author_sex, data = MFmeta, col = c("lightgray","pink","lightblue"))
boxplot(n_words author_sex, data = MFmeta, col = c("lightgray","pink","lightblue"))
attach(MFmeta)
boxplot(n_words ~ author_sex)
boxplot(n_words[author_sex == "male"], n_words[author_sex == "female"])
?boxplo
?boxplot
boxplot(n_words[author_sex == "male"], n_words[author_sex == "female"], names=c("male","female"))
boxplot(n_words[author_sex == "male"], n_words[author_sex == "female"], names=c("male","female"), col=c("lightblue","pink"))
boxplot(n_words[author_sex == "male"], n_words[author_sex == "female"], names=c("male","female"), col=c("lightblue","pink"), notch=TRUE)
setwd("/Users/severt/Project/SIGIL/R-Forge/course/demos")
dir
binom.test(19, 100, conf.level=.99)
binom.test(190, 1000, conf.level=.99)
prop.cint(c(150,190,200,300), 1000, conf.level=.99)
prop.cint(c(150,190,200,300), 1000, conf.level=.99)
prop.cint(c(19,38,95,190), c(100,200,500,1000), conf.level=.99)
