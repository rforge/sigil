hmin <- 110; hmax <- 230#
hist(FC$height, col="blue", labels=TRUE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,65000), breaks=seq(hmin, hmax, 5))#
dev.save("ingary_hist_freq_1")#
hist(FC$height, col="blue", main="", xlab="body height", xlim=c(120,220), ylim=c(0,65000), breaks=seq(hmin, hmax, 2.5))#
dev.save("ingary_hist_freq_2")
hist(FC$height, col="blue", freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, 5))#
dev.save("ingary_hist_1")#
hist(FC$height, col="blue", freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, 2.5))#
dev.save("ingary_hist_2")
hist(FC$height, col="blue", freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, 1))
hist(FC$height, col="blue", freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, 1))#
dev.save("ingary_hist_3")
hist(FC$height, col="blue", freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .5))
hist(FC$height, col="blue", border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .5))
hist(FC$height, col="blue", border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .1))
hist(FC$height, col="blue", border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .5))
hist(FC$height, col="blue", border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .2))
hist(FC$height, col="blue", border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .01))
hist(FC$height, col="blue", border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .4))
hist(FC$height, col="blue", border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .25))
hist(FC$height, col="blue", border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .3))
hist(FC$height, col="blue", border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .4))
dim(FC)
lines(density(FC$height, from=hmin, to=hmax))
lines(density(FC$height, from=hmin, to=hmax), col="red", lwd=3)
lines(density(FC$height, from=hmin, to=hmax), col="red", lwd=4)
hist(FC$height, col="blue", border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .4))#
dev.save("ingary_hist_4")#
lines(density(FC$height, from=hmin, to=hmax), col="red", lwd=4)#
dev.save("ingary_hist_4_curve")
myblue <- rgb(.1,.3,.8)
hist(FC$height, col=myblue, labels=TRUE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,65000), breaks=seq(hmin, hmax, 5))
myblue <- rgb(.2,.4,1)
hist(FC$height, col=myblue, labels=TRUE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,65000), breaks=seq(hmin, hmax, 5))
hmin <- 110; hmax <- 230#
hist(FC$height, col=myblue, labels=TRUE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,65000), breaks=seq(hmin, hmax, 5))#
dev.save("ingary_hist_freq_1")#
hist(FC$height, col=myblue, main="", xlab="body height", xlim=c(120,220), ylim=c(0,65000), breaks=seq(hmin, hmax, 2.5))#
dev.save("ingary_hist_freq_2")#
#
# density scale: area of bar = relative frequency / proportion in population#
hist(FC$height, col=myblue, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, 5))#
dev.save("ingary_hist_1")#
hist(FC$height, col=myblue, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, 2.5))#
dev.save("ingary_hist_2")#
hist(FC$height, col=myblue, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, 1))#
dev.save("ingary_hist_3")#
hist(FC$height, col=myblue, border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .4))#
dev.save("ingary_hist_4")#
lines(density(FC$height, from=hmin, to=hmax), col="red", lwd=4)#
dev.save("ingary_hist_4_curve")
myred <- rgb(.8,.1,.3)
lines(density(FC$height, from=hmin, to=hmax), col=myred, lwd=4)
myred <- rgb(.8,.3,.1)
lines(density(FC$height, from=hmin, to=hmax), col=myred, lwd=4)
hist(FC$height, col=myblue, border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .4))#
dev.save("ingary_hist_4")#
lines(density(FC$height, from=hmin, to=hmax), col=myred, lwd=4)#
dev.save("ingary_hist_4_curve")
myred <- rgb(.8,.1,.2)
hist(FC$height, col=myblue, border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .4))#
dev.save("ingary_hist_4")#
lines(density(FC$height, from=hmin, to=hmax), col=myred, lwd=4)#
dev.save("ingary_hist_4_curve")
myred <- rgb(.8,.2,.1)
hist(FC$height, col=myblue, border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .4))#
dev.save("ingary_hist_4")#
lines(density(FC$height, from=hmin, to=hmax), col=myred, lwd=4)#
dev.save("ingary_hist_4_curve")
myred <- rgb(.9,.2,.1)
hist(FC$height, col=myblue, border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .4))#
dev.save("ingary_hist_4")#
lines(density(FC$height, from=hmin, to=hmax), col=myred, lwd=4)#
dev.save("ingary_hist_4_curve")
source("/Users/severt/Project/SIGIL/R-Forge/course/latex-slides/R/functions.R")
hist(FC$height, col=myblue, border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .4))#
dev.save("ingary_hist_4")#
lines(density(FC$height, from=hmin, to=hmax), col=myred, lwd=4)#
dev.save("ingary_hist_4_curve")
lines(density(FC$height, from=hmin, to=hmax), col=myred, lwd=6)#
dev.save("ingary_hist_4_curve")
source("/Users/severt/Project/SIGIL/R-Forge/course/latex-slides/R/functions.R")
plot(table(FC$shoe.size) / m.FC, lwd=3, xlab="Shoe size", ylab="Proportion of population")
normality.plot(FakeCensus$weight, density=TRUE, ylim=c(0,.03), xlim=c(0,150))
source("/Users/severt/Project/SIGIL/R-Forge/course/latex-slides/R/functions.R")
normality.plot(FakeCensus$weight, density=TRUE, ylim=c(0,.03), xlim=c(0,150))
normality.plot(FakeCensus$weight, density=TRUE, ylim=c(0,.03), xlim=c(0,150))
source("/Users/severt/Project/SIGIL/R-Forge/course/latex-slides/R/functions.R")
normality.plot(FakeCensus$weight, density=TRUE, ylim=c(0,.03), xlim=c(0,150))
source("/Users/severt/Project/SIGIL/R-Forge/course/latex-slides/R/functions.R")
normality.plot(FakeCensus$weight, density=TRUE, ylim=c(0,.03), xlim=c(0,150))
myblue <- rgb(.1,.2,.7)#
myred <- rgb(1,.1,.25)#
mygreen <- rgb(.3,.8,.15)#
fillblue <- rgb(.2,.4,1)#
fillgrey <- rgb(.6,.6,.6)
normality.plot(FakeCensus$weight, density=TRUE, ylim=c(0,.03), xlim=c(0,150))
myblue <- rgb(.1,.2,.8)#
myred <- rgb(1,.1,.25)#
mygreen <- rgb(.3,.8,.15)#
fillblue <- rgb(.2,.4,1)#
fillgrey <- rgb(.6,.6,.6)
normality.plot(FakeCensus$weight, density=TRUE, ylim=c(0,.03), xlim=c(0,150))
mean.sd.plot(FakeCensus$height, median=TRUE) # similar to Gaussian, but more bulgy: well-described
mygreen <- rgb(.2,.6,.1)
mean.sd.plot(FakeCensus$height, median=TRUE) # similar to Gaussian, but more bulgy: well-described
mean.sd.plot(FakeCensus$weight, median=TRUE) # skewed
mean.sd.plot(FakeCensus$bmi, median=TRUE)    # somewhat skewed, but still well-described
mean.sd.plot(FakeCensus$shoe.size, median=TRUE)  # bimodal
mean.sd.plot(log10(WackypediaStats$tokens), median=TRUE) # these are all very well-behaved
mean.sd.plot(log10(WackypediaStats$types), median=TRUE)
source("/var/folders/cM/cMAsVOxOE50QxwrMhU2elU++RPs/-Tmp-//RtmpPgsFcY/file23284908")#
unlink("/var/folders/cM/cMAsVOxOE50QxwrMhU2elU++RPs/-Tmp-//RtmpPgsFcY/file23284908")
mean.sd.plot(log10(WackypediaStats$types), median=TRUE)
mean.sd.plot(FakeCensus$height, median=TRUE) # similar to Gaussian, but more bulgy: well-described
mean.sd.plot(FakeCensus$weight, median=TRUE) # skewed
mean.sd.plot(FakeCensus$bmi, median=TRUE)    # somewhat skewed, but still well-described
normality.plot(FakeCensus$weight, density=TRUE, ylim=c(0,.03), xlim=c(0,150))
hist(FC$height, col=myblue, labels=TRUE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,65000), breaks=seq(hmin, hmax, 5))
hmin <- 110; hmax <- 230#
hist(FC$height, col=fillblue, labels=TRUE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,65000), breaks=seq(hmin, hmax, 5))#
dev.save("ingary_hist_freq_1")#
hist(FC$height, col=fillblue, main="", xlab="body height", xlim=c(120,220), ylim=c(0,65000), breaks=seq(hmin, hmax, 2.5))#
dev.save("ingary_hist_freq_2")#
#
# density scale: area of bar = relative frequency / proportion in population#
hist(FC$height, col=fillblue, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, 5))#
dev.save("ingary_hist_1")#
hist(FC$height, col=fillblue, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, 2.5))#
dev.save("ingary_hist_2")#
hist(FC$height, col=fillblue, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, 1))#
dev.save("ingary_hist_3")#
hist(FC$height, col=fillblue, border=NA, freq=FALSE, main="", xlab="body height", xlim=c(120,220), ylim=c(0,.025), breaks=seq(hmin, hmax, .4))#
dev.save("ingary_hist_4")#
lines(density(FC$height, from=hmin, to=hmax), col=myred, lwd=6)#
dev.save("ingary_hist_4_curve")
d
?dcauchy
x <- seq(-2, 2, .1)#
y <- dcauchy(x)#
plot(x, y, type="l", lwd=6, col=myred)
x <- seq(-4, 4, .1)#
y <- dcauchy(x)#
plot(x, y, type="l", lwd=6, col=myred)
y <- dt(x, 1)#
plot(x, y, type="l", lwd=6, col=myred)
y <- dt(x, 5)#
plot(x, y, type="l", lwd=6, col=myred)
x <- seq(0, 10, .1)#
y <- dchisq(x, 3)#
plot(x, y, type="l", lwd=6, col=myred)
x <- seq(0, 10, .1)#
y <- dchisq(x, 4)#
plot(x, y, type="l", lwd=6, col=myred)
x <- seq(0, 9, .1)#
y <- dchisq(x, 4)#
plot(x, y, type="l", lwd=6, col=myred)
x <- seq(0, 10, .1)#
y <- dchisq(x, 2)#
plot(x, y, type="l", lwd=6, col=myred)
x <- seq(0, 10, .1)#
y <- dchisq(x, 1)#
plot(x, y, type="l", lwd=6, col=myred)
x <- seq(0, 10, .1)#
y <- dchisq(x, 3)#
plot(x, y, type="l", lwd=6, col=myred)
plot(x, y, type="l", lwd=6, col=myred, xlim=c(0,10))#
abline(h=0)
plot(x, y, type="l", lwd=6, col=myred, xlim=c(0,9))#
abline(h=0)
x <- seq(0, 11, .1)#
y <- dchisq(x, 3)#
plot(x, y, type="l", lwd=6, col=myred, xlim=c(0,10))#
abline(h=0)
?xaxs
?par
plot(x, y, type="n", xlab="", ylab="", xaxt="n", xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)#
plot(x, y, type="l", lwd=6, col=myred, xlim=c(0,10), ylim=c(0,.25))
plot(x, y, type="n", xlab="", ylab="", xaxt="n", xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)
plot(x, y, type="n", xlab="", ylab="", xaxt="n", yaxt="n" xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)
plot(x, y, type="n", xlab="", ylab="", xaxt="n", yaxt="n" xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)#
axis(1, c(3, 6), labels=expression(a, b))
plot(x, y, type="n", xlab="", ylab="", xaxt="n", yaxt="n", xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)#
axis(1, c(3, 6), labels=expression(a, b))
par.save <- par(mar=c(4,1,1,1)+.1)#
x <- seq(0, 11, .1)#
y <- dchisq(x, 3)#
plot(x, y, type="n", xlab="", ylab="", xaxt="n", yaxt="n", xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)#
axis(1, c(3, 6), labels=expression(a, b))
par(par.save)
plot(d, type="l", lwd=6, col=myred)
normality.plot(FakeCensus$weight, density=TRUE, ylim=c(0,.03), xlim=c(0,150))
par.save <- par(mar=c(4,1,1,1)+.1, xaxt="n", yaxt="n")#
x <- seq(0, 11, .1)#
y <- dchisq(x, 3)#
plot(x, y, type="n", xlab="", ylab="", xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)#
axis(1, c(3, 6), labels=expression(a, b))#
lines(x, y, lwd=6, col=myred)#
par(par.save)
par.save <- par(mar=c(4,1,1,1)+.1)#
x <- seq(0, 11, .1)#
y <- dchisq(x, 3)#
plot(x, y, type="n", xlab="", ylab="", xaxt="n", yaxt="n", xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)#
axis(1, c(3, 6), labels=expression(a, b))#
lines(x, y, lwd=6, col=myred)#
par(par.save)
polygon(c(x[idx], rev(x[idx])), c(y[idx], rep(0, sum[idx])), col=fillblue)
idx <- x >= 3 & x <= 6#
polygon(c(x[idx], rev(x[idx])), c(y[idx], rep(0, sum[idx])), col=fillblue)
polygon(c(x[idx], rev(x[idx])), c(y[idx], rep(0, sum(idx))), col=fillblue)
par.save <- par(mar=c(3,1,1,1)+.1, cex=1.4)#
x <- seq(0, 11, .1)#
y <- dchisq(x, 3)#
plot(x, y, type="n", xlab="", ylab="", xaxt="n", yaxt="n", xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)#
axis(1, c(3, 6), labels=expression(a, b))#
idx <- x >= 3 & x <= 6#
polygon(c(x[idx], rev(x[idx])), c(y[idx], rep(0, sum(idx))), col=fillblue)#
lines(x, y, lwd=6, col=myred)#
par(par.save)
par.save <- par(mar=c(3,1,1,1)+.1, cex=1.5)#
x <- seq(0, 11, .1)#
y <- dchisq(x, 3)#
plot(x, y, type="n", xlab="", ylab="", xaxt="n", yaxt="n", xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)#
axis(1, c(3, 6), labels=expression(a, b))#
idx <- x >= 3 & x <= 6#
polygon(c(x[idx], rev(x[idx])), c(y[idx], rep(0, sum(idx))), col=fillblue)#
lines(x, y, lwd=6, col=myred)#
par(par.save)
par.save <- par(mar=c(3,1,1,1)+.1, cex=1.5)#
x <- seq(0, 11, .1)#
y <- dchisq(x, 3)#
plot(x, y, type="n", xlab="", ylab="", xaxt="n", yaxt="n", xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)#
axis(1, c(3, 6), labels=expression(a, b))#
idx <- x >= 3 & x <= 6#
polygon(c(x[idx], rev(x[idx])), c(y[idx], rep(0, sum(idx))), col=fillblue)#
segments(c(3,6), c(0,0), c(3,6), dchisq(c(3,6), 3), col="black", lwd=3)#
lines(x, y, lwd=6, col=myred)#
par(par.save)
par.save <- par(mar=c(3,1,1,1)+.1, cex=1.5)#
x <- seq(0, 11, .1)#
y <- dchisq(x, 3)#
plot(x, y, type="n", xlab="", ylab="", xaxt="n", yaxt="n", xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)#
axis(1, c(3, 6), labels=expression(a, b))#
idx <- x >= 3 & x <= 6#
polygon(c(x[idx], rev(x[idx])), c(y[idx], rep(0, sum(idx))), col=fillblue)#
segments(c(3,6), c(0,0), c(3,6), dchisq(c(3,6), 3), col="black", lwd=3)#
lines(x, y, lwd=6, col=myred)#
dev.save("area_under_density")#
par(par.save)
par.save <- par(mar=c(3,1,1,1)+.1, cex=2)#
x <- seq(0, 11, .1)#
y <- dchisq(x, 3)#
plot(x, y, type="n", xlab="", ylab="", xaxt="n", yaxt="n", xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)#
axis(1, c(3, 6), labels=expression(a, b))#
idx <- x >= 3 & x <= 6#
polygon(c(x[idx], rev(x[idx])), c(y[idx], rep(0, sum(idx))), col=fillblue)#
segments(c(3,6), c(0,0), c(3,6), dchisq(c(3,6), 3), col="black", lwd=3)#
lines(x, y, lwd=6, col=myred)#
dev.save("area_under_density")#
par(par.save)
par.save <- par(mar=c(3,1,1,1)+.1, cex=3)#
x <- seq(0, 11, .1)#
y <- dchisq(x, 3)#
plot(x, y, type="n", xlab="", ylab="", xaxt="n", yaxt="n", xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)#
axis(1, c(3, 6), labels=expression(a, b))#
idx <- x >= 3 & x <= 6#
polygon(c(x[idx], rev(x[idx])), c(y[idx], rep(0, sum(idx))), col=fillblue)#
segments(c(3,6), c(0,0), c(3,6), dchisq(c(3,6), 3), col="black", lwd=3)#
lines(x, y, lwd=6, col=myred)#
dev.save("area_under_density")#
par(par.save)
par.save <- par(mar=c(2,0,0,0)+.1, cex=2.5)#
x <- seq(0, 11, .1)#
y <- dchisq(x, 3)#
plot(x, y, type="n", xlab="", ylab="", xaxt="n", yaxt="n", xlim=c(0,10), ylim=c(0,.25))#
abline(h=0)#
axis(1, c(3, 6), labels=expression(a, b))#
idx <- x >= 3 & x <= 6#
polygon(c(x[idx], rev(x[idx])), c(y[idx], rep(0, sum(idx))), col=fillblue)#
segments(c(3,6), c(0,0), c(3,6), dchisq(c(3,6), 3), col="black", lwd=3)#
lines(x, y, lwd=6, col=myred)#
dev.save("area_under_density")#
par(par.save)
mean.sd.plot(FakeCensus$height) # similar to Gaussian, but more bulgy
source("/Users/severt/Project/SIGIL/R-Forge/course/latex-slides/R/functions.R")
mean.sd.plot(FakeCensus$height) # similar to Gaussian, but more bulgy
mean.sd.plot(FakeCensus$height, median=T) # similar to Gaussian, but more bulgy
mean.sd.plot(FakeCensus$height) # similar to Gaussian, but more bulgy
mean.sd.plot(FakeCensus$weight, median=TRUE) # skewed
mean.sd.plot(FakeCensus$bmi, median=TRUE)    # somewhat skewed, but still well-described
mean.sd.plot(FakeCensus$shoe.size, median=TRUE)  # bimodal
mean.sd.plot(WackypediaStats$ttr, median=TRUE)
mean.sd.plot(WackypediaStats$avglen, median=TRUE)
mean.sd.plot(log10(WackypediaStats$tokens), median=TRUE) # these are all very well-behaved
mean.sd.plot(log10(WackypediaStats$types), median=TRUE)
mean.sd.plot(WackypediaStats$avglen, median=TRUE)
mean.sd.plot(WackypediaStats$ttr, median=TRUE)
mean.sd.plot(WackypediaStats$avglen, median=TRUE)
mean.sd.plot(WackypediaStats$avglen) # almost Gaussian#
dev.save("disttype_symmetric")#
mean.sd.plot(FakeCensus$height) # similar to Gaussian, but more bulgy#
dev.save("disttype_bulgy")
mean.sd.plot(WackypediaStats$avglen) # almost Gaussian
mean.sd.plot(WackypediaStats$avglen, xlim=c(3,6)) # almost Gaussian
mean.sd.plot(WackypediaStats$avglen, xlim=c(3.2,5.5)) # almost Gaussian#
dev.save("disttype_symmetric")
mean.sd.plot(FakeCensus$height) # similar to Gaussian, but more bulgy#
dev.save("disttype_bulgy")
mean.sd.plot(FakeCensus$height, xlim=c(125,215)) # similar to Gaussian, but more bulgy#
dev.save("disttype_bulgy")
mean.sd.plot(FakeCensus$weight)
mean.sd.plot(exp(rnorm(1e6)))
mean.sd.plot(exp(rnorm(1e6)), xlim=c(0,10))
mean.sd.plot(log(rnorm(1e6, 1, .1)), xlim=c(0,10))
mean.sd.plot(log(rnorm(1e6, 1, .1)), xlim=c(0,1))
mean.sd.plot(log(rnorm(1e6, 1, .1)), xlim=c(-1,1))
x <- exp(rnorm(1e6)) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(-1,1))
mean.sd.plot(x[x<=10])
mean.sd.plot(x[x<=10], xlim=c(0,8))
x <- exp(rnorm(1e6),0,2) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(0,8))
x <- exp(rnorm(1e6),0,10) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(0,8))
x <- exp(rnorm(1e6,0,10)) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(0,8))
x <- exp(rnorm(1e6,0,1)) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(0,8))
x <- exp(rnorm(1e6,0,2)) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(0,8))
x <- exp(rnorm(1e6,0,.5)) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(0,8))
mean.sd.plot(x[x<=10], xlim=c(0,8), median=TRUE)
x <- exp(rnorm(1e6,0,.2)) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(0,8), median=TRUE)
x <- exp(rnorm(1e6,0,2)) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(0,8), median=TRUE)
x <- exp(rnorm(1e6,0,1)) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(0,8), median=TRUE)
x <- exp(rnorm(1e6,0,1.5)) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(0,8), median=TRUE)
mean.sd.plot(x[x<=10], xlim=c(0,6), median=TRUE)
mean.sd.plot(x[x<=10], xlim=c(-2,6), median=TRUE)
x <- exp(rnorm(1e6,0,1)) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(-2,6), median=TRUE)
mean.sd.plot(FakeCensus$shoe.size)
mean.sd.plot(FakeCensus$weight)
mean.sd.plot(FakeCensus$weight, xlim=c(0,150))
mean.sd.plot(FakeCensus$weight, xlim=c(30,150))
mean.sd.plot(FakeCensus$weight, xlim=c(25,140))
mean.sd.plot(FakeCensus$weight, xlim=c(25,140), median=TRUE)
mean.sd.plot(FakeCensus$shoe.size)
mean.sd.plot(FakeCensus$shoe.size, median=TRUE)
mean.sd.plot(WackypediaStats$avglen, xlim=c(3.2,5.5)) # almost Gaussian#
dev.save("disttype_symmetric")#
mean.sd.plot(FakeCensus$height, xlim=c(125,215)) # similar to Gaussian, but more bulgy#
dev.save("disttype_bulgy")#
x <- exp(rnorm(1e6,0,1)) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(-2,6), median=TRUE)#
dev.save("disttype_skewed")#
mean.sd.plot(FakeCensus$weight, xlim=c(25,140), median=TRUE)#
dev.save("disttype_complicated")#
mean.sd.plot(FakeCensus$shoe.size, median=TRUE)#
dev.save("disttype_bimodal")
wide.device()#
mean.sd.plot(WackypediaStats$avglen, xlim=c(3.2,5.5)) # almost Gaussian#
dev.save("disttype_symmetric")#
mean.sd.plot(FakeCensus$height, xlim=c(125,215)) # similar to Gaussian, but more bulgy#
dev.save("disttype_bulgy")#
x <- exp(rnorm(1e6,0,1)) # truncated lognormal#
mean.sd.plot(x[x<=10], xlim=c(-2,6), median=TRUE)#
dev.save("disttype_skewed")#
mean.sd.plot(FakeCensus$weight, xlim=c(25,140), median=TRUE)#
dev.save("disttype_complicated")#
mean.sd.plot(FakeCensus$shoe.size, median=TRUE)#
dev.save("disttype_bimodal")#
dev.off()
wide.device()#
par(xaxt="n", yaxt="n", mar=c(3,2,1,1)+.5)#
plot(x.norm, y.norm, type="l", xlim=c(0,30), lwd=2, col="black", xlab="", ylab="")
title(xlab="x", ylab="f(x) [%]", line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=1, col="black")         # mean = mode of the distribution#
text(mu, .25, pos=4, labels=expression(mu))#
# abline(v=mu+sigma, lwd=1, col="blue")   # plus/minus 1 standard deviation#
# abline(v=mu-sigma, lwd=1, col="blue")#
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)#
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, angle=20, length=.2) # uses magic replication of single ("scalar") values#
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma))#
# abline(v=mu+2*sigma, lwd=1, col="red")  # plus/minus 2 standard deviations#
# abline(v=mu-2*sigma, lwd=1, col="red")#
y1 <- 100 * dnorm(mu+2*sigma, mean=mu, sd=sigma)#
arrows(mu, y1, c(mu+2*sigma, mu-2*sigma), y1, angle=20, length=.2)#
text(c(mu+sigma, mu-sigma), y1, pos=3, labels=expression(2*sigma))#
idx.tail <- x.norm >= mu + 2*sigma # shade two-sided 5% tails of distribution (beyond 2*sigma)#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, angle=45, density=10, border="black")#
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, angle=45, density=10, border="black")
plot(x.norm, y.norm, type="l", xlim=c(0,30), lwd=2, col="black", xlab="", ylab="")
mu <- n * p#
sigma <- sqrt(n * p * (1-p))#
x.norm <- seq(min(k)-1, max(k)+1, .05)   # x values of bell curve#
y.norm <- 100 * dnorm(x.norm, mean=mu, sd=sigma) # y values of bell curve, scaled to percentages
par(xaxt="n", yaxt="n", mar=c(3,2,1,1)+.5)#
plot(x.norm, y.norm, type="l", xlim=c(0,30), lwd=2, col="black", xlab="", ylab="")#
title(xlab="x", ylab="f(x) [%]", line=1)
mu <- n * p#
sigma <- sqrt(n * p * (1-p))#
x.norm <- seq(min(k)-1, max(k)+1, .05)   # x values of bell curve#
y.norm <- 100 * dnorm(x.norm, mean=mu, sd=sigma) # y values of bell curve, scaled to percentages
par(xaxt="n", yaxt="n", mar=c(3,2,1,1)+.5)#
plot(x.norm, y.norm, type="l", xlim=c(0,30), lwd=2, col="black", xlab="", ylab="")#
title(xlab="x", ylab="f(x) [%]", line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=1, col="black")         # mean = mode of the distribution#
text(mu, .25, pos=4, labels=expression(mu))
mu <- n * p
k <- 0:30#
n <- 100#
p <- .15#
mu <- n * p#
sigma <- sqrt(n * p * (1-p))#
x.norm <- seq(min(k)-1, max(k)+1, .05)   # x values of bell curve#
y.norm <- 100 * dnorm(x.norm, mean=mu, sd=sigma) # y values of bell curve, scaled to percentages
par(xaxt="n", yaxt="n", mar=c(3,2,1,1)+.5)#
plot(x.norm, y.norm, type="l", xlim=c(0,30), lwd=2, col="black", xlab="", ylab="")#
title(xlab="x", ylab="f(x) [%]", line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=1, col="black")         # mean = mode of the distribution
text(mu, .25, pos=4, labels=expression(mu))#
# abline(v=mu+sigma, lwd=1, col="blue")   # plus/minus 1 standard deviation#
# abline(v=mu-sigma, lwd=1, col="blue")#
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, angle=20, length=.2) # uses magic replication of single ("scalar") values#
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma))#
# abline(v=mu+2*sigma, lwd=1, col="red")  # plus/minus 2 standard deviations#
# abline(v=mu-2*sigma, lwd=1, col="red")#
y1 <- 100 * dnorm(mu+2*sigma, mean=mu, sd=sigma)#
arrows(mu, y1, c(mu+2*sigma, mu-2*sigma), y1, angle=20, length=.2)
text(c(mu+sigma, mu-sigma), y1, pos=3, labels=expression(2*sigma))#
idx.tail <- x.norm >= mu + 2*sigma # shade two-sided 5% tails of distribution (beyond 2*sigma)#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, angle=45, density=10, border="black")#
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, angle=45, density=10, border="black")
par(xaxt="n", yaxt="n", mar=c(2,2,.5,.5)+.1)#
#
plot(x.norm, y.norm, type="l", xlim=c(0,30), lwd=2, col="black", xlab="", ylab="")
title(xlab="x", ylab="f(x) [%]", line=1)
title(xlab=expression(t), ylab=expression(g(t)), line=1)
plot(x.norm, y.norm, type="l", xlim=c(0,30), lwd=2, col="black", xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)
par(xaxt="n", yaxt="n", cex=1.5, mar=c(2,2,.5,.5)+.1)#
#
plot(x.norm, y.norm, type="l", xlim=c(0,30), lwd=2, col="black", xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)
abline(h=0)                             # show x-axis
abline(v=mu, lwd=1, col="black")         # mean = mode of the distribution
plot(x.norm, y.norm, type="l", xlim=c(0,30), lwd=6, col="black", xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=1, col="black")         # mean = mode of the distribution
par(xaxt="n", yaxt="n", xaxs="i", cex=1.5, mar=c(2,2,.5,.5)+.1)
plot(x.norm, y.norm, type="l", xlim=c(0,30), lwd=6, col="black", xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=1, col="black")         # mean = mode of the distribution
text(mu, .25, pos=4, labels=expression(mu))
text(mu, .25, pos=4, labels=expression(mu), cex=2)
text(mu, .25, pos=4, labels=expression(mu), cex=1.6)
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myblue)
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)#
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, angle=20, length=.2) # uses magic replication of single ("scalar") values#
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma))
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myred)
 abline(v=mu+sigma, lwd=1, col="blue")   # plus/minus 1 standard deviation#
 abline(v=mu-sigma, lwd=1, col="blue")
abline(v=mu+sigma, lwd=1, col=myblue)   # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myblue)
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, lwd=3, col=myred, angle=20, length=.2) # uses magic replication of single ("scalar")
abline(v=mu, lwd=1, col=myred)         # mean = mode of the distribution
abline(v=mu, lwd=1, col=myblue)         # mean = mode of the distribution#
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myblue)
plot(x.norm, y.norm, type="l", xlim=c(0,30), lwd=6, col="black", xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=1, col=myblue)         # mean = mode of the distribution#
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myblue)#
abline(v=mu+sigma, lwd=1, col=myblue)   # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myblue)
abline(v=mu, lwd=2, col=myblue)         # mean = mode of the distribution#
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myblue)#
abline(v=mu+sigma, lwd=1, col=myblue)   # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myblue)
abline(v=mu+sigma, lwd=1, col=myred)   # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myred)#
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)#
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, lwd=3, col=myred, angle=20, length=.2) # uses magic replication of single ("scalar") values#
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma))
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma), cex=1.4, col=myred)
arrows(mu, y1, c(mu+2*sigma, mu-2*sigma), y1, lwd=3, col=myred, angle=20, length=.2)
abline(v=mu+2*sigma, lwd=1, col=myred)  # plus/minus 2 standard deviations#
abline(v=mu-2*sigma, lwd=1, col=myred)#
y1 <- 100 * dnorm(mu+2*sigma, mean=mu, sd=sigma)#
arrows(mu, y1, c(mu+2*sigma, mu-2*sigma), y1, lwd=3, col=myred, angle=20, length=.2)#
text(c(mu+sigma, mu-sigma), y1, pos=3, labels=expression(2*sigma), cex=1.4, col=myred)
text(c(mu+sigma/2, mu-sigma/2), y1, pos=3, labels=expression(2*sigma), cex=1.4, col=myred)
idx.tail <- x.norm >= mu + 2*sigma # shade two-sided 5% tails of distribution (beyond 2*sigma)#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, angle=45, density=10, border="black")#
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, angle=45, density=10, border="black")
polygon(x.poly, y.poly, col=fillblue, border="black")
polygon(x.poly, y.poly, col=fillblue)
polygon(x.poly, y.poly, col=fillblue)
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue)
plot(x.norm, y.norm, type="l", xlim=c(0,30), lwd=6, col="black", xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=2, col=myblue)         # mean = mode of the distribution#
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myblue)#
abline(v=mu+sigma, lwd=1, col=myred)   # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myred)#
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)#
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, lwd=3, col=myred, angle=20, length=.2) # uses magic replication of single ("scalar") values#
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma), cex=1.4, col=myred)#
abline(v=mu+2*sigma, lwd=1, col=myred)  # plus/minus 2 standard deviations#
abline(v=mu-2*sigma, lwd=1, col=myred)#
y1 <- 100 * dnorm(mu+2*sigma, mean=mu, sd=sigma)#
arrows(mu, y1, c(mu+2*sigma, mu-2*sigma), y1, lwd=3, col=myred, angle=20, length=.2)#
text(c(mu+sigma/2, mu-sigma/2), y1, pos=3, labels=expression(2*sigma), cex=1.4, col=myred)#
idx.tail <- x.norm >= mu + 2*sigma # shade two-sided 5% tails of distribution (beyond 2*sigma)#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue)#
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue)
polygon(x.poly, y.poly, col=fillblue, border="black")
plot(x.norm, y.norm, type="n", xlim=c(0,30), xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=2, col=myblue)         # mean = mode of the distribution#
abline(v=mu+sigma, lwd=1, col=myred)   # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myred)#
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)
plot(x.norm, y.norm, type="n", xlim=c(0,30), xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=2, col=myblue)         # mean = mode of the distribution#
abline(v=mu+sigma, lwd=1, col=myred)    # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myred)#
abline(v=mu+2*sigma, lwd=1, col=myred)  # plus/minus 2 standard deviations#
abline(v=mu-2*sigma, lwd=1, col=myred)#
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)
idx.tail <- x.norm >= mu + 2*sigma # shade two-sided 5% tails of distribution (beyond 2*sigma)#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue)#
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")
idx.tail <- x.norm >= mu + 2*sigma # shade two-sided 5% tails of distribution (beyond 2*sigma)#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")
lines(x.norm, y.norm, type="l", lwd=6, col="black") # draw density function here to cover background material#
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myblue) # label for mu#
# arrows for plus/minus 1 and 2 standard deviations#
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, lwd=3, col=myred, angle=20, length=.2) # uses magic replication of single ("scalar") values#
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma), cex=1.4, col=myred)#
y1 <- 100 * dnorm(mu+2*sigma, mean=mu, sd=sigma)#
arrows(mu, y1, c(mu+2*sigma, mu-2*sigma), y1, lwd=3, col=myred, angle=20, length=.2)#
text(c(mu+sigma/2, mu-sigma/2), y1, pos=3, labels=expression(2*sigma), cex=1.4, col=myred)
k <- 0:30#
n <- 100#
p <- .15#
mu <- n * p#
sigma <- sqrt(n * p * (1-p))#
x.norm <- seq(min(k)-1, max(k)+1, .05)   # x values of bell curve#
y.norm <- 100 * dnorm(x.norm, mean=mu, sd=sigma) # y values of bell curve, scaled to percentages#
#
wide.device()#
par(xaxt="n", yaxt="n", xaxs="i", cex=1.5, mar=c(2,2,.5,.5)+.1)#
#
plot(x.norm, y.norm, type="n", xlim=c(0,30), xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=2, col=myblue)         # mean = mode of the distribution#
abline(v=mu+sigma, lwd=1, col=myred)    # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myred)#
abline(v=mu+2*sigma, lwd=1, col=myred)  # plus/minus 2 standard deviations#
abline(v=mu-2*sigma, lwd=1, col=myred)#
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)#
#
idx.tail <- x.norm >= mu + 2*sigma # shade two-sided 5% tails of distribution (beyond 2*sigma)#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
#
lines(x.norm, y.norm, type="l", lwd=6, col="black") # draw density function here to cover background material#
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myblue) # label for mu#
# arrows for plus/minus 1 and 2 standard deviations#
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, lwd=3, col=myred, angle=20, length=.2) # uses magic replication of single ("scalar") values#
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma), cex=1.4, col=myred)#
y1 <- 100 * dnorm(mu+2*sigma, mean=mu, sd=sigma)#
arrows(mu, y1, c(mu+2*sigma, mu-2*sigma), y1, lwd=3, col=myred, angle=20, length=.2)#
text(c(mu+sigma/2, mu-sigma/2), y1, pos=3, labels=expression(2*sigma), cex=1.4, col=myred)#
#
dev.save("gaussian_parameters")#
dev.off()
wide.device()#
par(xaxt="n", yaxt="n", xaxs="i", yaxs="i", cex=1.5, mar=c(2,2,.5,.5)+.1)#
#
plot(x.norm, y.norm, type="n", xlim=c(0,30), xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=2, col=myblue)         # mean = mode of the distribution#
abline(v=mu+sigma, lwd=1, col=myred)    # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myred)#
abline(v=mu+2*sigma, lwd=1, col=myred)  # plus/minus 2 standard deviations#
abline(v=mu-2*sigma, lwd=1, col=myred)#
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)#
#
idx.tail <- x.norm >= mu + 2*sigma # shade two-sided 5% tails of distribution (beyond 2*sigma)#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
#
lines(x.norm, y.norm, type="l", lwd=6, col="black") # draw density function here to cover background material#
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myblue) # label for mu#
# arrows for plus/minus 1 and 2 standard deviations#
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, lwd=3, col=myred, angle=20, length=.2) # uses magic replication of single ("scalar") values#
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma), cex=1.4, col=myred)#
y1 <- 100 * dnorm(mu+2*sigma, mean=mu, sd=sigma)#
arrows(mu, y1, c(mu+2*sigma, mu-2*sigma), y1, lwd=3, col=myred, angle=20, length=.2)#
text(c(mu+sigma/2, mu-sigma/2), y1, pos=3, labels=expression(2*sigma), cex=1.4, col=myred)#
#
dev.save("gaussian_parameters")#
dev.off()
dev.new(width=12, height=7)
dev.new(width=12, height=7, bg="white")#
par(xaxt="n", yaxt="n", xaxs="i", yaxs="i", cex=1.5, mar=c(2,2,.5,.5)+.1)#
#
plot(x.norm, y.norm, type="n", xlim=c(0,30), xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=2, col=myblue)         # mean = mode of the distribution#
abline(v=mu+sigma, lwd=1, col=myred)    # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myred)#
abline(v=mu+2*sigma, lwd=1, col=myred)  # plus/minus 2 standard deviations#
abline(v=mu-2*sigma, lwd=1, col=myred)#
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)#
#
idx.tail <- x.norm >= mu + 2*sigma # shade two-sided 5% tails of distribution (beyond 2*sigma)#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
#
lines(x.norm, y.norm, type="l", lwd=6, col="black") # draw density function here to cover background material#
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myblue) # label for mu#
# arrows for plus/minus 1 and 2 standard deviations#
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, lwd=3, col=myred, angle=20, length=.2) # uses magic replication of single ("scalar") values#
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma), cex=1.4, col=myred)#
y1 <- 100 * dnorm(mu+2*sigma, mean=mu, sd=sigma)#
arrows(mu, y1, c(mu+2*sigma, mu-2*sigma), y1, lwd=3, col=myred, angle=20, length=.2)#
text(c(mu+sigma/2, mu-sigma/2), y1, pos=3, labels=expression(2*sigma), cex=1.4, col=myred)#
#
dev.save("gaussian_parameters")#
dev.off()
dev.new(width=12, height=7, bg="white")#
par(xaxt="n", yaxt="n", xaxs="i", yaxs="i", cex=1.5, mar=c(2,2,.5,.5)+.1)#
#
plot(x.norm, y.norm, type="n", xlim=c(0,30), ylim=range(y.norm)+(-.01,.01), xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=2, col=myblue)         # mean = mode of the distribution#
abline(v=mu+sigma, lwd=1, col=myred)    # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myred)#
abline(v=mu+2*sigma, lwd=1, col=myred)  # plus/minus 2 standard deviations#
abline(v=mu-2*sigma, lwd=1, col=myred)#
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)#
#
idx.tail <- x.norm >= mu + 2*sigma # shade two-sided 5% tails of distribution (beyond 2*sigma)#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
#
lines(x.norm, y.norm, type="l", lwd=6, col="black") # draw density function here to cover background material#
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myblue) # label for mu#
# arrows for plus/minus 1 and 2 standard deviations#
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, lwd=3, col=myred, angle=20, length=.2) # uses magic replication of single ("scalar") values#
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma), cex=1.4, col=myred)#
y1 <- 100 * dnorm(mu+2*sigma, mean=mu, sd=sigma)#
arrows(mu, y1, c(mu+2*sigma, mu-2*sigma), y1, lwd=3, col=myred, angle=20, length=.2)#
text(c(mu+sigma/2, mu-sigma/2), y1, pos=3, labels=expression(2*sigma), cex=1.4, col=myred)
plot(x.norm, y.norm, type="n", xlim=c(0,30), ylim=range(y.norm)+c(-.01,.01), xlab="", ylab="")
title(xlab=expression(t), ylab=expression(g(t)), line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=2, col=myblue)         # mean = mode of the distribution#
abline(v=mu+sigma, lwd=1, col=myred)    # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myred)#
abline(v=mu+2*sigma, lwd=1, col=myred)  # plus/minus 2 standard deviations#
abline(v=mu-2*sigma, lwd=1, col=myred)#
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)#
#
idx.tail <- x.norm >= mu + 2*sigma # shade two-sided 5% tails of distribution (beyond 2*sigma)#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
#
lines(x.norm, y.norm, type="l", lwd=6, col="black") # draw density function here to cover background material#
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myblue) # label for mu#
# arrows for plus/minus 1 and 2 standard deviations#
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, lwd=3, col=myred, angle=20, length=.2) # uses magic replication of single ("scalar") values#
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma), cex=1.4, col=myred)#
y1 <- 100 * dnorm(mu+2*sigma, mean=mu, sd=sigma)#
arrows(mu, y1, c(mu+2*sigma, mu-2*sigma), y1, lwd=3, col=myred, angle=20, length=.2)#
text(c(mu+sigma/2, mu-sigma/2), y1, pos=3, labels=expression(2*sigma), cex=1.4, col=myred)
plot(x.norm, y.norm, type="n", xlim=c(0,30), ylim=range(y.norm)+c(-.1,.1), xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=2, col=myblue)         # mean = mode of the distribution#
abline(v=mu+sigma, lwd=1, col=myred)    # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myred)#
abline(v=mu+2*sigma, lwd=1, col=myred)  # plus/minus 2 standard deviations#
abline(v=mu-2*sigma, lwd=1, col=myred)#
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)#
#
idx.tail <- x.norm >= mu + 2*sigma # shade two-sided 5% tails of distribution (beyond 2*sigma)#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
#
lines(x.norm, y.norm, type="l", lwd=6, col="black") # draw density function here to cover background material#
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myblue) # label for mu#
# arrows for plus/minus 1 and 2 standard deviations#
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, lwd=3, col=myred, angle=20, length=.2) # uses magic replication of single ("scalar") values#
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma), cex=1.4, col=myred)#
y1 <- 100 * dnorm(mu+2*sigma, mean=mu, sd=sigma)#
arrows(mu, y1, c(mu+2*sigma, mu-2*sigma), y1, lwd=3, col=myred, angle=20, length=.2)#
text(c(mu+sigma/2, mu-sigma/2), y1, pos=3, labels=expression(2*sigma), cex=1.4, col=myred)
dev.new(width=12, height=7, bg="white")#
par(xaxt="n", yaxt="n", xaxs="i", yaxs="i", cex=1.5, mar=c(2,2,.5,.5)+.1)#
#
plot(x.norm, y.norm, type="n", xlim=c(0,30), ylim=range(y.norm)+c(-.05,.2), xlab="", ylab="")#
title(xlab=expression(t), ylab=expression(g(t)), line=1)#
abline(h=0)                             # show x-axis#
abline(v=mu, lwd=2, col=myblue)         # mean = mode of the distribution#
abline(v=mu+sigma, lwd=1, col=myred)    # plus/minus 1 standard deviation#
abline(v=mu-sigma, lwd=1, col=myred)#
abline(v=mu+2*sigma, lwd=1, col=myred)  # plus/minus 2 standard deviations#
abline(v=mu-2*sigma, lwd=1, col=myred)#
y0 <- 100 * dnorm(mu+sigma, mean=mu, sd=sigma)#
#
idx.tail <- x.norm >= mu + 2*sigma # shade two-sided 5% tails of distribution (beyond 2*sigma)#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
idx.tail <- x.norm <= mu - 2*sigma # left tail#
x.tail <- x.norm[idx.tail]#
y.tail <- y.norm[idx.tail]#
x.poly <- c(x.tail, rev(x.tail))        # boundary of polygon shape for tail#
y.poly <- c(y.tail, rep(0, length=length(y.tail)))#
polygon(x.poly, y.poly, col=fillblue, border="black")#
#
lines(x.norm, y.norm, type="l", lwd=6, col="black") # draw density function here to cover background material#
text(mu, .25, pos=4, labels=expression(mu), cex=1.6, col=myblue) # label for mu#
# arrows for plus/minus 1 and 2 standard deviations#
arrows(mu, y0, c(mu+sigma, mu-sigma), y0, lwd=3, col=myred, angle=20, length=.2) # uses magic replication of single ("scalar") values#
text(c(mu+sigma/2, mu-sigma/2), y0, pos=3, labels=expression(sigma), cex=1.4, col=myred)#
y1 <- 100 * dnorm(mu+2*sigma, mean=mu, sd=sigma)#
arrows(mu, y1, c(mu+2*sigma, mu-2*sigma), y1, lwd=3, col=myred, angle=20, length=.2)#
text(c(mu+sigma/2, mu-sigma/2), y1, pos=3, labels=expression(2*sigma), cex=1.4, col=myred)
dev.save("gaussian_parameters")#
dev.off()
pnorm(-2)
2*pnorm(-2)
1-2*pnorm(-2)
pnorm(1)
pnorm(-1)
2*pnorm(-1)
pnorm(1) - pnorm(-1)
pnorm(2) - pnorm(-2)
qnorm(.05/2)
qnorm(.01/2)
qnorm(.001/2)
?var.test
var.test
var.test.default
getS3method(var.test)
getS3method(var.test, "default")
getS3method("var.test", "default")
?pt
qt(.05/2, 1)
-qt(.05/2, 1)
-qt(.05/2, 10)
-qt(.05/2, 30)
-qt(.05/2, 50)
-qt(.05/2, 100)
-qt(.05/2, 500)
-qt(.05/2, 50)
-qt(.01/2, 50)
